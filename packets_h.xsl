<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" encoding="Windows-1252"/>
  <xsl:variable name="empty" select="/@empty" />

  <xsl:template match="/">/* autogenerated file */
#ifndef PACKETS_H
#define PACKETS_H

#include "APacket.h"

void getAllPackets(std::vector&lt;APacket *> &amp;packets);
<xsl:for-each select="/proto/class">
class <xsl:value-of select="./@name"/>;</xsl:for-each>

<xsl:for-each select="/proto/class">
class <xsl:value-of select="./@name"/>
{
public:
    bool internal_parse(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 &amp;offset);
};
</xsl:for-each>
<xsl:for-each select="/proto/packet">
/**
<xsl:value-of select="./@comment"/>
*/
class <xsl:value-of select="./@state"/>_<xsl:value-of select="./@name"/>_<xsl:value-of select="./@boundto"/>: public APacket
{
public:
    <xsl:value-of select="./@state"/>_<xsl:value-of select="./@name"/>_<xsl:value-of select="./@boundto"/>();
    virtual ~<xsl:value-of select="./@state"/>_<xsl:value-of select="./@name"/>_<xsl:value-of select="./@boundto"/>();
    virtual bool isClientSide();
    virtual EState getState();
protected:
    virtual hf_register_info *getFieldInfo_internal();
    virtual int getId();
    virtual bool internal_parse(proto_tree *tree, tvbuff_t *tvb, packet_info *pinfo, guint32 &amp;offset);
private:
    <xsl:for-each select="./@field">
    gint hf_mc_id_<xsl:value-of select="./@name"/>;
    hf_register_info hf_mc_<xsl:value-of select="./@name"/>;
    </xsl:for-each>

    typedef std::vector&lt;hf_register_info *> RegInfo;
    RegInfo mRegInfo;
};
</xsl:for-each>
#endif
  </xsl:template>
</xsl:stylesheet>